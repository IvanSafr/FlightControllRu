/*
  Этот пример показывает, как настроить радиомодуль EBYTE на прием данных в режиме "WOR".
  Этот режим служит для экономии энергии приемника, что особо актуально при работе от аккумулятора.
  Минусом данного режима является то, что модуль может только принимать данные, а передавать не может.
  В случае необходимости, контроллер может переключить модуль в другой режим для передачи данных, а потом вернуться в режим "WOR".
*/

#include <SoftwareSerial.h>
#include "EBYTE22.h"

// Константы для Arduino

#define PIN_TX 2
#define PIN_RX 3
#define PIN_M0 4
#define PIN_M1 5
#define PIN_AX 6

// Константы для плат на ESP8266
/*
#define PIN_RX 14
#define PIN_TX 12
#define PIN_M0 5
#define PIN_M1 4
#define PIN_AX 13
*/

int count = 0;

SoftwareSerial E22Serial(PIN_TX, PIN_RX, false);  // Создаем объект SoftwareSerial для соединения с модулем через программный UART

EBYTE22 E22(&E22Serial, PIN_M0, PIN_M1, PIN_AX);  // Создаем экземпляр класса EBYTE22

void setup() {
 Serial.begin(9600);                              // Устанавливаем соединение с компьютером (телефоном) для отладки.
 E22Serial.begin(9600);                           // Устанавливаем соединение с модулем (скорость 9600).
 Serial.println("Starting Sender");
 delay(200);
 
 
  if(E22.init()){                                 // Инициализируем модуль(конфигурируются выводы контроллера, считываются настройки модуля).
  Serial.println("init OK");
  } else{
  Serial.println("init Error");}                  // Если что-то пошло не так, выводим сообщение об ошибке.
 
  // В случае ошибки, проверьте правильность подключения и перезапустите модуль с контроллером сбросом питания (кнопка сброса контроллера НЕ ПОМОГАЕТ).

 E22.setMode(MODE_WOR);            // Устанавливает режим работы WOR. (Применяется сразу)
 E22.setWOR(WOR_RECEIVER);         // Конфигурируем модуль как приемник
 E22.setWORCycle(WOR2000);         // Устанавливаем время цикла WOR равным 2000мс (2сек). У приемника и передатчика этот параметр должен быть одинаковым.

 E22.writeSettings(TEMPORARY);     // Применяем настройки временно (до потери питания).

  // После приема данных, приемник WOR, в течении некоторого времени имеет возможность отправить ответ, после чего вернется в цикл ожидания маркера.
  // С помощью следующего метода можно установить это время в мс (0 - 65535). По умолчанию - 0.
  // Настройка применится сразу же, временно или с сохранением в ПЗУ. Метод возвращает значение типа bool (true - успех, false - ошибка).
  // Установим возможность ответа в течении 2-х секунд после приема данных.
 
 E22.writeWORReceiverDelay(2000, TEMPORARY);
}

void loop() {
 // Передатчик, перед отправкой сообщения, будет транслировать маркер 2 секунды.
 // Приемник, у которого время цикла WOR такое же, как у передатчика (2сек), будет "просыпаться" каждые 2 секунды и "слушать" маркер, при обнаружении которого будет готов к приему сообщения.
 // Таким образом приемник не будет работать все время, а лишь какой-то момент каждые 2 секунды. Это позволит значительно сэкономить заряд батареи.

    if (E22Serial.available() > 0) {         // Проверим, пришло ли что-то.
     String s = E22Serial.readString();      // Если да - считаем полученные данные в строку
     Serial.println(s);                      // И выведем содержимое строки в монитор порта
     }
     
 // Теперь есть 2 секунды, чтобы отправить ответ (если нужно).


delay(100);                                  // Небольшая задержка.

}
